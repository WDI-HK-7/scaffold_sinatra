#!/usr/bin/env ruby

require 'active_support/inflector'
require 'fileutils'
require 'pathname'
require 'open-uri'
require 'colorize'
require 'erb'

require 'pry' # TODO remove!

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), *%w[.. lib])
require 'scaffold_sinatra'
require 'trollop'

DATA_PATH = File.expand_path("../../data", __FILE__)

include ScaffoldSinatra::Utils
include FileUtils

######################
# Parse options and set environment
######################

opts = Trollop::options do
  version("ScaffoldSinatra #{ScaffoldSinatra::VERSION}")
  # originally used 'version', but this caused major namespace confusions...
  opt :level, "Set scaffold level: 'basic', 'standard', or 'full'.", type: :string, default: "full"
end

if is_scaffold?(opts[:level])
  self.scaffold = opts[:level]
else
  puts "There is no scaffold named '#{opts[:level]}.' See `scaffold_sinatra -h`.".red
  exit
end

######################
# Ensure project name
######################

project_name = ARGV[0]

if project_name.nil?
  puts "Can't build project without name.".red
  exit
end

# it's a naming thing
project_snake_case = project_name.underscore
project_camel_case = project_snake_case.camelize
project_title_case = project_snake_case.titleize

# check input
if Dir.exist?(project_snake_case)
  puts "#{project_snake_case} already exists!".red
  exit
end

######################
# Run scaffold
######################

# make app repo
mkdir(project_snake_case)

# and do all the work there...
cd(project_snake_case) do

  # copy data directory over
  data_root = Pathname.new(DATA_PATH)
  Dir.glob(File.join(DATA_PATH, "**/{*,.*}")).each do |data_file_path|
    relative_file_path = Pathname.new(data_file_path).relative_path_from(data_root)
    next if !include_in_scaffold?(relative_file_path)

    # make directories as necessary
    if File.directory?(data_file_path)
      mkdir(relative_file_path)

    # render ERB files and save output to new files
    elsif File.extname(data_file_path) == ".erb"
      relative_path_without_erb = relative_file_path.to_s.rpartition('.').first
      File.open(relative_path_without_erb, 'w+') do |f|
        f.write(ERB.new(File.read(data_file_path)).result(binding))
      end

    # copy whole non-ERB files (no rendering)
    else
      cp(data_file_path, relative_file_path)
    end
  end

  # FIXME fails when not connected to internet

  # copy files from internet
  File.open('public/stylesheets/normalize.css', 'w+') do |f|
    normalize_url = 'https://raw.githubusercontent.com/necolas/normalize.css/master/normalize.css'
    f.write(open(normalize_url).read)
  end

  system('bundle install') if standard_scaffold?

  puts('>> OK!'.white)
  puts(">> Created #{project_snake_case}!".green)
  puts('>> Use `bundle exec rackup -p 3000` or `bundle exec shotgun -p 3000`' + \
       '>> from inside the application\'s directory to run it!')
end
